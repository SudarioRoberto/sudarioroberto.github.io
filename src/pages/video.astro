---
import BaseLayout from '../layouts/BaseLayout.astro';
import Navbar from '../components/Navbar.astro';

// In a real implementation, this would likely come from a CMS or be Markdown files
const videoContent = [
  {
    slug: 'microbiome-basics',
    title: 'Microbiome Basics for Producers',
    description: 'Learn the fundamentals of swine gut microbiome and its practical implications for farm management and performance.',
    image: '/images/microbiome.png',
    date: 'March 15, 2025',
    duration: '30 min',
    presenter: 'Andres Gomez',
    videoId: 'S-vZzJM9usA'
  },
  {
    slug: 'prebiotics-webinar',
    title: 'Prebiotics and Probiotics: Implementation Guide',
    description: 'A detailed walkthrough of how to implement prebiotics and probiotics strategies in commercial swine operations.',
    image: '/images/postbiotic.png',
    date: 'February 22, 2025',
    duration: '45 min',
    presenter: 'Sudario Roberto Silva Junior',
    videoId: 'example123'
  },
  {
    slug: 'reducing-antibiotics',
    title: 'Antibiotic Reduction Case Studies',
    description: 'Real-world examples of farms that successfully reduced antibiotic use through microbiome optimization strategies.',
    image: '/images/metadata.png',
    date: 'January 18, 2025',
    duration: '25 min',
    presenter: 'Pedro Urriola',
    videoId: 'example456'
  },
  {
    slug: 'feed-efficiency',
    title: 'Improving Feed Efficiency Through Microbiome Management',
    description: 'Practical strategies to optimize feed utilization by supporting beneficial gut bacteria.',
    image: '/images/nutrition.png',
    date: 'December 10, 2024',
    duration: '35 min',
    presenter: 'Maria Johnson',
    videoId: 'example789'
  }
];
---

<BaseLayout title="Videos" description="Educational videos and webinars from the MicroPig team">
  <Navbar />
  <div class="pt-32 pb-20 px-6 md:px-12 bg-umn-off-white">
    <div class="container mx-auto max-w-6xl">
      <!-- Header -->
      <div class="text-center mb-16">
        <h1 class="text-4xl md:text-5xl font-bold mb-6 text-umn-maroon">MicroPig Videos</h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          Educational videos, webinars, and demonstrations for practical microbiome implementation
        </p>
      </div>
      
      <!-- Video Grid -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {videoContent.map((video) => (
          <article class="bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2">
            <div class="relative video-thumbnail-container" data-video-id={video.videoId}>
              <img src={video.image} alt={video.title} class="w-full h-48 object-cover" />
              <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center">
                <div class="w-16 h-16 rounded-full bg-umn-maroon bg-opacity-90 flex items-center justify-center cursor-pointer play-button">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                  </svg>
                </div>
              </div>
            </div>
            <div class="p-6">
              <div class="flex justify-between items-center text-sm text-gray-500 mb-3">
                <time>{video.date}</time>
                <span class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  {video.duration}
                </span>
              </div>
              <h2 class="text-xl font-bold mb-3 text-umn-maroon">
                <a href={`/videos/${video.slug}`} class="hover:text-umn-light-maroon transition-colors">
                  {video.title}
                </a>
              </h2>
              <p class="text-gray-600 mb-3">
                {video.description}
              </p>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">
                  Presenter: {video.presenter}
                </span>
                <button class="inline-flex items-center text-umn-maroon font-medium hover:text-umn-light-maroon transition-colors watch-video-btn" data-video-id={video.videoId}>
                  Watch video
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          </article>
        ))}
      </div>
    </div>
  </div>
</BaseLayout>

<!-- Video Modal -->
<div id="videoModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center">
  <div class="bg-white rounded-lg w-full max-w-4xl mx-4 sm:mx-auto p-1 relative">
    <!-- Close button -->
    <button id="closeVideoModal" class="absolute -top-10 right-0 text-white text-xl hover:text-gray-300 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Video container with 16:9 aspect ratio -->
    <div class="relative" style="padding-bottom: 56.25%;">
      <iframe id="videoFrame" class="absolute top-0 left-0 w-full h-full rounded-lg" 
              frameborder="0" 
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen>
      </iframe>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const videoThumbnails = document.querySelectorAll('.video-thumbnail-container');
    const watchButtons = document.querySelectorAll('.watch-video-btn');
    const videoModal = document.getElementById('videoModal');
    const videoFrame = document.getElementById('videoFrame');
    const closeVideoModal = document.getElementById('closeVideoModal');
    
    // Open video modal when clicking on thumbnails
    videoThumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', function() {
        const videoId = this.getAttribute('data-video-id');
        openVideoModal(videoId);
      });
    });
    
    // Open video modal when clicking on watch buttons
    watchButtons.forEach(button => {
      button.addEventListener('click', function() {
        const videoId = this.getAttribute('data-video-id');
        openVideoModal(videoId);
      });
    });
    
    // Function to open video modal
    function openVideoModal(videoId) {
      if (videoFrame && videoModal) {
        videoFrame.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
        videoModal.classList.remove('hidden');
        videoModal.classList.add('flex');
        document.body.style.overflow = 'hidden';
      }
    }
    
    // Function to close video modal
    function closeVideoModalFunc() {
      if (videoFrame && videoModal) {
        videoModal.classList.add('hidden');
        videoModal.classList.remove('flex');
        videoFrame.src = '';
        document.body.style.overflow = '';
      }
    }
    
    // Add event listener to close button
    if (closeVideoModal) {
      closeVideoModal.addEventListener('click', closeVideoModalFunc);
    }
    
    // Close when clicking outside the video
    if (videoModal) {
      videoModal.addEventListener('click', function(e) {
        if (e.target === this) {
          closeVideoModalFunc();
        }
      });
    }
    
    // Close modal with ESC key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && videoModal && !videoModal.classList.contains('hidden')) {
        closeVideoModalFunc();
      }
    });
  });
</script>