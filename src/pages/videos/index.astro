---
// src/pages/videos/index.astro
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navbar from '../../components/Navbar.astro';
import VideoCard from '../../components/VideoCard.astro';

// Your video data - make this exportable so it can be imported by HybridResources
export const videoContent = [
  {
    videoId: 'S-vZzJM9usA',
    title: 'Microbiome Basics for Producers',
    description: 'Learn the fundamentals of swine gut microbiome and its practical implications for farm management and performance.',
    date: 'March 15, 2025',
    duration: '30 min',
    presenter: 'Dr. Andres Gomez',
    externalUrl: 'https://www.youtube.com/watch?v=S-vZzJM9usA'
  },
  {
    videoId: 'ybb6ENMEUCw',
    title: 'Utilization of Food Waste Ingredients for Feed | International Rendering Symposium',
    description: 'Discover innovative approaches to utilizing food waste as feed ingredients with Dr. Pedro E. Urriola from the University of Minnesota. This session at the International Rendering Symposium 2025 explores sustainable solutions to reduce waste and enhance animal nutrition.',
    date: 'February 4, 2025',
    duration: '40 min',
    presenter: 'Dr. Pedro Urriola',
    externalUrl: 'https://www.youtube.com/watch?v=ybb6ENMEUCw'
  },
  {
    videoId: '9fCDd3xrGiI',
    title: 'Unlocking the POTENTIAL of MICROBIOMICS in SWINE nutrition',
    description: ' In this interview Dr. Andres Gomez talked to us about some of his past research as well as his current work with the swine microbiome.',
    date: 'January 23, 2023',
    duration: '38 min',
    presenter: 'Dr. Andres Gomez',
    externalUrl: 'https://www.youtube.com/watch?v=9fCDd3xrGiI'
  },
  {
    videoId: 'XDXs--xAbXI',
    title: 'Ingredient Digestibility in Swine Nutrition ',
    description: ' In this interview Dr. Pedro Urriola talked to us about some of his past research as well as his current work with the ingredient digestibility in swine nutrition.',
    date: 'August 30, 2021',
    duration: '50 min',
    presenter: 'Dr. Pedro Urriola',
    externalUrl: 'https://www.youtube.com/watch?v=XDXs--xAbXII'
  },

];

// For each video, generate the thumbnail URL
const videosWithThumbnails = videoContent.map(video => ({
  ...video,
  // Default high quality thumbnail URL
  thumbnailUrl: `https://img.youtube.com/vi/${video.videoId}/maxresdefault.jpg`,
  // Fallback image for development (when using example IDs)
  fallbackImage: `/images/video-placeholder.jpg`
}));
---

<BaseLayout title="Videos" description="Educational videos and webinars from the MicroPig team">
  <Navbar />
  <div class="pt-32 pb-20 px-6 md:px-12 bg-umn-off-white">
    <div class="container mx-auto max-w-6xl">
      <!-- Header -->
      <div class="text-center mb-16">
        <h1 class="text-4xl md:text-5xl font-bold mb-6 text-umn-maroon">MicroPig Videos</h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          Educational videos, webinars, and demonstrations for practical microbiome implementation
        </p>
      </div>
      
      <!-- Video Grid -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {videosWithThumbnails.map((video) => (
          <VideoCard
            videoId={video.videoId}
            title={video.title}
            description={video.description}
            date={video.date}
            duration={video.duration}
            presenter={video.presenter}
            externalUrl={video.externalUrl}
            thumbnailUrl={video.thumbnailUrl}
          />
        ))}
      </div>
    </div>
  </div>
</BaseLayout>

<!-- Video Modal -->
<div id="videoModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center">
  <div class="bg-white rounded-lg w-full max-w-4xl mx-4 sm:mx-auto p-1 relative">
    <!-- Close button -->
    <button id="closeVideoModal" class="absolute -top-10 right-0 text-white text-xl hover:text-gray-300 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Video container with 16:9 aspect ratio -->
    <div class="relative" style="padding-bottom: 56.25%;">
      <iframe id="videoFrame" class="absolute top-0 left-0 w-full h-full rounded-lg" 
              frameborder="0" 
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen>
      </iframe>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const videoThumbnails = document.querySelectorAll('.video-thumbnail-container');
    const watchButtons = document.querySelectorAll('.watch-video-btn');
    const videoModal = document.getElementById('videoModal');
    const videoFrame = document.getElementById('videoFrame');
    const closeVideoModal = document.getElementById('closeVideoModal');
    
    // Open video modal when clicking on thumbnails
    videoThumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', function() {
        const videoId = this.getAttribute('data-video-id');
        openVideoModal(videoId);
      });
    });
    
    // Open video modal when clicking on watch buttons
    watchButtons.forEach(button => {
      button.addEventListener('click', function() {
        const videoId = this.getAttribute('data-video-id');
        openVideoModal(videoId);
      });
    });
    
    // Function to open video modal
    function openVideoModal(videoId) {
      if (videoFrame && videoModal) {
        videoFrame.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
        videoModal.classList.remove('hidden');
        videoModal.classList.add('flex');
        document.body.style.overflow = 'hidden';
      }
    }
    
    // Function to close video modal
    function closeVideoModalFunc() {
      if (videoFrame && videoModal) {
        videoModal.classList.add('hidden');
        videoModal.classList.remove('flex');
        videoFrame.src = '';
        document.body.style.overflow = '';
      }
    }
    
    // Add event listener to close button
    if (closeVideoModal) {
      closeVideoModal.addEventListener('click', closeVideoModalFunc);
    }
    
    // Close when clicking outside the video
    if (videoModal) {
      videoModal.addEventListener('click', function(e) {
        if (e.target === this) {
          closeVideoModalFunc();
        }
      });
    }
    
    // Close modal with ESC key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && videoModal && !videoModal.classList.contains('hidden')) {
        closeVideoModalFunc();
      }
    });
  });
</script>