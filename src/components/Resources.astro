---
import ResourceCard from './ResourceCard.astro';

// Sort resources from newest to oldest
const resources = [
  {
    title: "Prebiotics, Probiotics, and Postbiotics for Pigs' Gut Health",
    description: "Dietary means of influencing the gut microbiome...",
    image: "/images/postbiotic.png",
    type: "blog", // This is a blog post
    date: "2025-04-15",
    link: "https://www.realporktrust.org/post/prebiotics-probiotics-and-postbiotics-for-pigs-gut-health",
    linkText: "Read article"
  },
  {
    title: "The Power of Meta-Analysis in Swine Gut Microbiome Research",
    description: "Understanding how combined research findings...",
    image: "/images/metadata.png",
    type: "blog", // This is a blog post
    date: "2025-03-20",
    link: "/blog-meta-analysis",
    linkText: "Read article"
  },
  {
  title: "Microbiome Basics for Producers",
  description: "Learn the fundamentals of swine gut microbiome and its practical implications for farm management and performance.",
  image: "/images/microbiome.png",
  type: "video",
  date: "2025-03-15",
  duration: "30 min",
  link: "https://www.youtube.com/watch?v=S-vZzJM9usA",
  linkText: "Watch video",
  videoId: "S-vZzJM9usA"  // âœ… This must be here
},
];

// Sort resources by date (newest first)
const sortedResources = [...resources].sort((a, b) => new Date(b.date) - new Date(a.date));
---

<section id="resources" class="py-20 px-6 md:px-12 bg-gray-50">
  <div class="container mx-auto max-w-6xl">
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4 section-heading">Educational Resources</h2>
      <p class="text-gray-600 max-w-3xl mx-auto">
        Access practical guides, research findings, and tools to implement microbiome-focused nutrition strategies.
      </p>
    </div>
    
    <!-- Carousel container -->
    <div class="relative">
      <!-- Previous/Next buttons for larger screens -->
      <button id="prevBtn" class="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-5 z-10 bg-white rounded-full p-2 shadow-md hidden md:block focus:outline-none hover:bg-gray-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <button id="nextBtn" class="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-5 z-10 bg-white rounded-full p-2 shadow-md hidden md:block focus:outline-none hover:bg-gray-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
      
      <!-- Carousel track -->
      <div id="carouselTrack" class="flex transition-transform duration-300 ease-out overflow-x-scroll md:overflow-x-hidden snap-x snap-mandatory scroll-smooth">
        {sortedResources.map((resource, index) => (
          <div class="flex-none w-full md:w-1/3 px-4 snap-start">
            <ResourceCard 
              title={resource.title}
              description={resource.description}
              image={resource.image}
              type={resource.type}
              duration={resource.duration}
              link={resource.link}
              linkText={resource.linkText}
              delay={index * 0.2}
              videoId={resource.videoId}
              date={resource.date}
            />
          </div>
        ))}
      </div>
      
      <!-- Dots for mobile -->
      <div class="flex justify-center mt-6 space-x-2 md:hidden">
        {sortedResources.map((_, index) => (
          <button class="carousel-dot w-3 h-3 rounded-full bg-gray-300 focus:outline-none" data-index={index}></button>
        ))}
      </div>
    </div>
  </div>
</section>

<!-- Video Modal (same as before) -->
<div id="videoModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center">
  <div class="bg-white rounded-lg w-full max-w-4xl mx-4 sm:mx-auto p-1 relative">
    <!-- Close button -->
    <button id="closeVideoModal" class="absolute -top-10 right-0 text-white text-xl hover:text-gray-300 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Video container with 16:9 aspect ratio -->
    <div class="relative" style="padding-bottom: 56.25%;">
      <iframe id="videoFrame" class="absolute top-0 left-0 w-full h-full rounded-lg" 
              frameborder="0" 
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen>
      </iframe>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Video modal functionality
    const videoCards = document.querySelectorAll('.resource-card[data-type="video"]');
    const videoModal = document.getElementById('videoModal');
    const videoFrame = document.getElementById('videoFrame');
    const closeVideoModal = document.getElementById('closeVideoModal');
    
    // We need to decide how to handle video clicks - either open modal or go to video page
    // Option 1: Open modal when clicking on the card (except the link) and go to page when clicking the link
    videoCards.forEach(card => {
      // Make the card itself (but not the link) open the modal
      card.addEventListener('click', function(e) {
        // If the click is on the card but not on the link
        if (!e.target.closest('a')) {
          const videoId = this.getAttribute('data-video-id');
          if (videoId) {
            e.preventDefault();
            openVideoModal(videoId);
          }
        }
      });
      
      // Let the link navigate to the video page
      // No additional event listeners needed - links will navigate normally
      
      // Alternatively, add a "Play now" button that opens the modal
      const playButton = document.createElement('button');
      playButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg> Play Now';
      playButton.className = 'mt-2 bg-red-600 text-white py-1 px-3 rounded-full inline-flex items-center text-sm hover:bg-red-700 transition';
      
      // Add the play button after the link in the card
      const cardFooter = card.querySelector('.mt-auto');
      if (cardFooter) {
        cardFooter.appendChild(document.createElement('br'));
        cardFooter.appendChild(playButton);
        
        // Make the play button open the modal
        playButton.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          const videoId = card.getAttribute('data-video-id');
          if (videoId) {
            openVideoModal(videoId);
          }
        });
      }
    });
    
    // Function to open video modal
    function openVideoModal(videoId) {
      if (videoFrame && videoModal) {
        videoFrame.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
        videoModal.classList.remove('hidden');
        videoModal.classList.add('flex');
        document.body.style.overflow = 'hidden';
      }
    }
    
    // Function to close video modal
    function closeVideoModalFunc() {
      if (videoFrame && videoModal) {
        videoModal.classList.add('hidden');
        videoModal.classList.remove('flex');
        videoFrame.src = '';
        document.body.style.overflow = '';
      }
    }
    
    // Add event listener to close button
    if (closeVideoModal) {
      closeVideoModal.addEventListener('click', closeVideoModalFunc);
    }
    
    // Close when clicking outside the video
    if (videoModal) {
      videoModal.addEventListener('click', function(e) {
        if (e.target === this) {
          closeVideoModalFunc();
        }
      });
    }
    
    // Close modal with ESC key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && videoModal && !videoModal.classList.contains('hidden')) {
        closeVideoModalFunc();
      }
    });

    // Carousel functionality
    const track = document.getElementById('carouselTrack');
    const slides = Array.from(track.children);
    const nextButton = document.getElementById('nextBtn');
    const prevButton = document.getElementById('prevBtn');
    const dotsContainer = document.querySelector('.flex.justify-center.mt-6');
    const dots = Array.from(document.querySelectorAll('.carousel-dot'));
    
    let currentIndex = 0;
    const slideWidth = slides[0].getBoundingClientRect().width;
    
    // Initialize dots
    if (dots.length > 0) {
      dots[0].classList.add('bg-blue-500');
      dots[0].classList.remove('bg-gray-300');
    }
    
    // Set slide positions
    function setSlidePosition() {
      slides.forEach((slide, index) => {
        slide.style.transform = `translateX(${index * 100}%)`;
      });
    }
    
    setSlidePosition();
    
    // Move to slide
    function moveToSlide(targetIndex) {
      if (targetIndex < 0) {
        targetIndex = slides.length - 1;
      } else if (targetIndex >= slides.length) {
        targetIndex = 0;
      }
      
      currentIndex = targetIndex;
      
      // Update track transform
      track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
      
      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-blue-500');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.add('bg-gray-300');
          dot.classList.remove('bg-blue-500');
        }
      });
    }
    
    // Next button event
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        moveToSlide(currentIndex + 1);
      });
    }
    
    // Prev button event
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        moveToSlide(currentIndex - 1);
      });
    }
    
    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        moveToSlide(index);
      });
    });
    
    // Handle swipe for mobile
    let touchStartX = 0;
    let touchEndX = 0;
    
    track.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    track.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    
    function handleSwipe() {
      const swipeThreshold = 50;
      if (touchEndX < touchStartX - swipeThreshold) {
        // Swipe left - go next
        moveToSlide(currentIndex + 1);
      } else if (touchEndX > touchStartX + swipeThreshold) {
        // Swipe right - go prev
        moveToSlide(currentIndex - 1);
      }
    }
    
    // Adjust carousel on window resize
    window.addEventListener('resize', () => {
      // Recalculate slide width
      const newSlideWidth = slides[0].getBoundingClientRect().width;
      // Update track position for current slide
      track.style.transform = `translateX(-${currentIndex * newSlideWidth}px)`;
    });
  });
</script>