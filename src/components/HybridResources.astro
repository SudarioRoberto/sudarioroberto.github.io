---
// src/components/HybridResources.astro
import ResourceCard from './ResourceCard.astro';
import { getCollection } from 'astro:content';

// Function to safely get blog posts
async function getBlogPosts() {
  try {
    const blogEntries = await getCollection('blog');
    return blogEntries.map(entry => ({
      title: entry.data.title,
      description: entry.data.description,
      image: entry.data.featuredImage,
      type: 'blog',
      date: entry.data.publishDate,
      link: `/blog/${entry.slug}`,
      linkText: 'Read article'
    }));
  } catch (error) {
    console.error("Error loading blog posts:", error);
    return [];
  }
}

// Function to safely get videos
async function getVideos() {
  try {
    const videoEntries = await getCollection('videos');
    return videoEntries.map(entry => ({
      title: entry.data.title,
      description: entry.data.description,
      // Replace this line
      // image: entry.data.thumbnail,
      // With this line to automatically use YouTube thumbnails
      image: `https://img.youtube.com/vi/${entry.data.videoId}/maxresdefault.jpg`,
      type: 'video',
      date: entry.data.publishDate,
      duration: entry.data.duration,
      presenter: entry.data.presenter,
      videoId: entry.data.videoId,
      link: '#',
      linkText: 'Watch video'
    }));
  } catch (error) {
    console.error("Error loading videos:", error);
    return [];
  }
}

// Get all content
const blogPosts = await getBlogPosts();
const videos = await getVideos();

// Combine blog posts and videos
const allResources = [...blogPosts, ...videos];

// Sort by date (newest first)
const sortedResources = allResources.sort((a, b) => {
  const dateA = new Date(a.date);
  const dateB = new Date(b.date);
  return dateB.getTime() - dateA.getTime();
});

// For debugging
console.log(`Total resources: ${allResources.length}, Videos: ${videos.length}, Blogs: ${blogPosts.length}`);
---

<section id="resources" class="py-20 px-6 md:px-12 bg-gray-50">
  <div class="container mx-auto max-w-6xl pt-10">
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4 section-heading">Educational Resources</h2>
      <p class="text-gray-600 max-w-3xl mx-auto text-lg">
        Access practical guides, research findings, and tools to implement microbiome-focused nutrition strategies.
      </p>
    </div>
    
    <!-- Carousel container -->
    <div class="relative">
      <!-- Previous/Next buttons for larger screens -->
      <button id="prevBtn" class="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-5 z-10 bg-white rounded-full p-2 shadow-md hidden md:block focus:outline-none hover:bg-gray-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <button id="nextBtn" class="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-5 z-10 bg-white rounded-full p-2 shadow-md hidden md:block focus:outline-none hover:bg-gray-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
      
      <!-- Carousel track - pre-set the width for more stability -->
      <div id="carouselTrack" class="flex overflow-x-auto space-x-6 no-scrollbar">
        {sortedResources.length > 0 ? (
          sortedResources.map((resource, index) => (
            <div class="flex-none w-full md:w-1/3 px-4 snap-start">
              <ResourceCard 
                title={resource.title}
                description={resource.description}
                image={resource.image}
                type={resource.type}
                duration={resource.duration}
                link={resource.link}
                linkText={resource.linkText || (resource.type === 'video' ? 'Watch video' : 'Read article')}
                delay={index * 0.2}
                videoId={resource.videoId}
                date={resource.date}
                presenter={resource.presenter}
              />
            </div>
          ))
        ) : (
          <div class="w-full text-center py-10">
            <p class="text-gray-500">No resources available yet. Check back soon!</p>
          </div>
        )}
      </div>
      
      <!-- Dots for mobile -->
      {sortedResources.length > 0 && (
        <div class="flex justify-center mt-6 space-x-2 md:hidden">
          {sortedResources.map((_, index) => (
            <button class="carousel-dot w-3 h-3 rounded-full bg-gray-300 focus:outline-none" data-index={index}></button>
          ))}
        </div>
      )}
    </div>
  </div>
</section>

<!-- Video Modal -->
<div id="resourcesVideoModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center">
  <div class="bg-white rounded-lg w-full max-w-4xl mx-4 sm:mx-auto p-1 relative">
    <!-- Close button -->
    <button id="closeResourcesVideoModal" class="absolute -top-10 right-0 text-white text-xl hover:text-gray-300 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Video container with 16:9 aspect ratio -->
    <div class="relative" style="padding-bottom: 56.25%;">
      <iframe id="resourcesVideoFrame" class="absolute top-0 left-0 w-full h-full rounded-lg" 
              frameborder="0" 
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen>
      </iframe>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize video resources functionality
    initializeVideoResources();
    
    // Set up carousel functionality
    setupCarousel();
    
    function initializeVideoResources() {
      // Video modal functionality
      const resourcesVideoModal = document.getElementById('resourcesVideoModal');
      const resourcesVideoFrame = document.getElementById('resourcesVideoFrame');
      const closeResourcesVideoModal = document.getElementById('closeResourcesVideoModal');
      
      // Get all video card elements
      const videoCards = document.querySelectorAll('.resource-card[data-type="video"]');
      const videoLinks = document.querySelectorAll('.resource-card[data-type="video"] a');
      
      console.log("Found video cards:", videoCards.length);
      
      // Make video cards clickable to open modal
      videoCards.forEach(card => {
        card.style.cursor = 'pointer';
        
        card.addEventListener('click', function(e) {
          // Ignore clicks on links or buttons
          if (e.target.closest('a') || e.target.closest('button')) {
            return;
          }
          
          const videoId = this.getAttribute('data-video-id');
          if (videoId) {
            e.preventDefault();
            openVideoModal(videoId);
          }
        });
      });
      
      // Make watch video links open the modal
      videoLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const card = this.closest('.resource-card');
          const videoId = card ? card.getAttribute('data-video-id') : null;
          if (videoId) {
            openVideoModal(videoId);
          }
        });
      });
      
      // Function to open video modal
      function openVideoModal(videoId) {
        if (resourcesVideoFrame && resourcesVideoModal) {
          resourcesVideoFrame.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
          resourcesVideoModal.classList.remove('hidden');
          resourcesVideoModal.classList.add('flex');
          document.body.style.overflow = 'hidden';
        }
      }
      
      // Function to close video modal
      function closeVideoModal() {
        if (resourcesVideoFrame && resourcesVideoModal) {
          resourcesVideoModal.classList.add('hidden');
          resourcesVideoModal.classList.remove('flex');
          resourcesVideoFrame.src = '';
          document.body.style.overflow = '';
        }
      }
      
      // Add event listener to close button
      if (closeResourcesVideoModal) {
        closeResourcesVideoModal.addEventListener('click', closeVideoModal);
      }
      
      // Close when clicking outside the video
      if (resourcesVideoModal) {
        resourcesVideoModal.addEventListener('click', function(e) {
          if (e.target === this) {
            closeVideoModal();
          }
        });
      }
      
      // Close modal with ESC key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && resourcesVideoModal && !resourcesVideoModal.classList.contains('hidden')) {
          closeVideoModal();
        }
      });
    }
    
    function setupCarousel() {
  const track = document.getElementById('carouselTrack');
  const nextButton = document.getElementById('nextBtn');
  const prevButton = document.getElementById('prevBtn');

  if (!track) return;

  const scrollAmount = 300; // px to scroll per click

  if (nextButton) {
    nextButton.addEventListener('click', () => {
      track.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    });
  }

  if (prevButton) {
    prevButton.addEventListener('click', () => {
      track.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
    });
  }
}
  });
</script>