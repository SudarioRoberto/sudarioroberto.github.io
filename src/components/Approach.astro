---
const featureCards = [
  {
    title: "Dialogue Model",
    description: "We engage in mutual exchange with producers, veterinarians, and industry partners, creating space for feedback and practical insights that refine our research based on real-world constraints."
  },
  {
    title: "Participation Model",
    description: "We involve stakeholders in co-designing trials and interpreting data, making collaborative decisions about dietary formulations, prebiotic use, and housing conditions."
  },
  {
    title: "Continuous Innovation Cycle",
    description: "Our research integrates adoption strategies and stakeholder feedback to continually improve our innovations and ensure they address real industry needs."
  }
];

const steps = [
  { 
    number: 1, 
    title: "Innovation Development", 
    description: "Developing targeted solutions based on scientific research and stakeholder needs" 
  },
  { 
    number: 2, 
    title: "Adoption Strategies", 
    description: "Creating practical implementation paths for on-farm application" 
  },
  { 
    number: 3, 
    title: "Intended Audience", 
    description: "Tailoring solutions for producers, veterinarians, and industry partners" 
  },
  { 
    number: 4, 
    title: "Integrated Feedback", 
    description: "Incorporating real-world results and stakeholder insights to refine innovations" 
  }
];
---

<section id="approach" class="py-20 px-6 md:px-12 bg-white">
  <div class="container mx-auto max-w-6xl pt-20">
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4 section-heading">Our Collaborative Approach</h2>
      <p class="text-gray-600 max-w-3xl mx-auto">
        We believe in Responsible Research and Innovation that integrates stakeholder feedback throughout the research cycle.
      </p>
    </div>
    
    <div class="grid md:grid-cols-2 gap-12 items-center mb-20">
      <div class="image-container rounded-xl overflow-hidden shadow-xl">
        <img src="images/farmer.png" 
             alt="Researchers and farmers collaborating" 
             class="w-full h-full object-cover transition-all duration-700">
      </div>
      
      <div class="space-y-6">
        {featureCards.map((card, index) => (
          <div class="feature-card bg-gray-50 p-6 hover:shadow-md transition-all duration-300 slide-up" style={`transition-delay: ${index * 0.2}s`}>
            <h3 class="text-xl font-bold mb-3 text-umn-maroon">{card.title}</h3>
            <p class="text-gray-600">
              {card.description}
            </p>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Innovation Cycle - Improved for all devices -->
    <div class="mt-20 mb-16" id="innovation-cycle">
      <h3 class="text-3xl font-bold mb-12 text-center">Our Responsible Innovation Cycle</h3>
      
      <!-- Desktop version with connected cards -->
      <div class="hidden md:block relative">
        <!-- Connecting background circle -->
        <div class="absolute inset-0 flex items-center justify-center z-0">
          <div class="w-3/4 h-3/4 border-4 border-dashed border-umn-gold/30 rounded-full"></div>
        </div>
        
        <div class="grid grid-cols-2 gap-x-36 gap-y-32 relative z-10">
          {steps.map((step, index) => {
            // Calculate position in the grid
            let gridPosition;
            switch(index) {
              case 0: gridPosition = "col-start-1"; break; // Step 1 (top left)
              case 1: gridPosition = "col-start-2"; break; // Step 2 (top right)
              case 2: gridPosition = "col-start-2 row-start-2"; break; // Step 3 (bottom right)
              case 3: gridPosition = "col-start-1 row-start-2"; break; // Step 4 (bottom left)
              default: gridPosition = "";
            }
            
            // Determine arrow direction based on position
            let arrowDirection;
            switch(index) {
              case 0: arrowDirection = "right"; break;
              case 1: arrowDirection = "down"; break;
              case 2: arrowDirection = "left"; break;
              case 3: arrowDirection = "up"; break;
              default: arrowDirection = "";
            }
            
            return (
              <div class={`cycle-card transform hover:scale-105 transition-all duration-300 ${gridPosition}`}>
                <div class="bg-white rounded-xl shadow-lg p-8 relative">
                  <div class="cycle-number absolute -top-6 -left-6 w-16 h-16 rounded-full bg-umn-maroon text-white text-2xl font-bold flex items-center justify-center shadow-lg">{step.number}</div>
                  <h4 class="font-bold text-xl mb-3 pl-10">{step.title}</h4>
                  <p class="text-gray-600">{step.description}</p>
                </div>
                
                {/* Arrows connecting to the next step */}
                {arrowDirection === "right" && (
                  <svg class="absolute top-1/2 -right-28" width="100" height="30" viewBox="0 0 100 30">
                    <path d="M0 15 H90 M80 5 L100 15 L80 25" fill="none" stroke="#7A0019" stroke-width="2"/>
                  </svg>
                )}
                
                {arrowDirection === "down" && (
                  <svg class="absolute left-1/2 -bottom-24" width="30" height="80" viewBox="0 0 30 80">
                    <path d="M15 0 V70 M5 60 L15 80 L25 60" fill="none" stroke="#7A0019" stroke-width="2"/>
                  </svg>
                )}
                
                {arrowDirection === "left" && (
                  <svg class="absolute top-1/2 -left-28" width="100" height="30" viewBox="0 0 100 30">
                    <path d="M100 15 H10 M20 5 L0 15 L20 25" fill="none" stroke="#7A0019" stroke-width="2"/>
                  </svg>
                )}
                
                {arrowDirection === "up" && (
                  <svg class="absolute -top-28 left-1/2 transform -translate-x-1/2" width="30" height="80" viewBox="0 0 30 80">
                    <path d="M15 80 V10 M5 20 L15 0 L25 20" fill="none" stroke="#7A0019" stroke-width="2"/>
                  </svg>
                )}
              </div>
            );
          })}
        </div>
      </div>
      
      <!-- Mobile version with vertical flow -->
      <div class="md:hidden space-y-6">
        <!-- Mobile cycle container with visual indicator -->
        <div class="relative pb-12">
          <div class="absolute top-0 bottom-0 left-8 w-1 bg-umn-gold/30"></div>
          
          {steps.map((step, index) => (
            <div class="cycle-card bg-white rounded-xl shadow-lg p-6 relative mb-12 ml-16">
              <div class="cycle-number absolute -top-4 -left-20 w-12 h-12 rounded-full bg-umn-maroon text-white text-xl font-bold flex items-center justify-center shadow-md z-10">{step.number}</div>
              <h4 class="font-bold text-lg mb-2">{step.title}</h4>
              <p class="text-gray-600 text-sm">{step.description}</p>
              
              {/* Show arrow for all but the last step */}
              {index < steps.length - 1 && (
                <div class="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-umn-maroon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 5v14m-7-7l7 7 7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
              )}
            </div>
          ))}
          
          {/* Circular return arrow for last step to first step */}
          <div class="mt-8 flex justify-center w-full">
            <div class="relative w-full max-w-xs h-24 flex items-center justify-center">
              <svg class="w-full" viewBox="0 0 200 70" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M170 35 H30 C25 35 10 35 10 10 C10 0 20 0 30 0 H170" 
                      stroke="#7A0019" stroke-width="2" stroke-dasharray="6 4"/>
                <path d="M160 10 L180 0 L180 20" fill="none" stroke="#7A0019" stroke-width="2"/>
                <text x="75" y="55" font-family="sans-serif" font-size="12" fill="#7A0019">Back to Step 1</text>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .cycle-card {
    transition: all 0.3s ease;
  }
  
  .cycle-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
  }
  
  .cycle-number {
    transition: all 0.3s ease;
  }
  
  .cycle-card:hover .cycle-number {
    transform: scale(1.1);
  }
  
  @media (max-width: 768px) {
    .cycle-card {
      margin-left: 2rem;
    }
  }
</style>