---
// src/components/ResourceCard.astro
export interface Props {
  title: string;
  description: string;
  image: string;
  type: 'blog' | 'video';
  date: string;
  link: string;
  linkText?: string;
  delay?: number;
  videoId?: string;
  duration?: string;
  presenter?: string;
  isExternal?: boolean;
}

const { 
  title, 
  description, 
  image, 
  type, 
  date, 
  link, 
  linkText, 
  delay = 0,
  videoId,
  duration,
  presenter,
  isExternal = false
} = Astro.props;

// Format date
const formatDate = (dateString) => {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch (e) {
    console.error("Date formatting error:", e);
    return dateString; // Return original string if formatting fails
  }
};

const formattedDate = formatDate(date);
---

<div 
  class="resource-card bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 slide-up" 
  style={`transition-delay: ${delay}s`}
  data-type={type}
  data-video-id={videoId}
>
  <div class="relative h-48">
    <img 
      src={image} 
      alt={title}
      class="w-full h-full object-cover"
      onerror="this.src='/images/fallback-blog.jpg';"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex items-end">
      <div class="p-4 w-full">
        <div class="flex justify-between items-center text-sm text-white">
          <span class={`px-2 py-1 rounded-full text-xs ${type === 'blog' ? 'bg-umn-maroon' : 'bg-umn-gold text-umn-maroon'}`}>
            {type === 'blog' ? (isExternal ? 'External Article' : 'Article') : 'Video'}
          </span>
          {type === 'video' && duration && (
            <span class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              {duration}
            </span>
          )}
        </div>
      </div>
    </div>
  </div>
  
  <div class="p-6">
    <div class="flex justify-between items-center text-sm text-gray-500 mb-3">
      <time>{formattedDate}</time>
      {presenter && <span>{presenter}</span>}
      {isExternal && !presenter && <span>External Source</span>}
    </div>
    
    <h3 class="text-xl font-bold mb-3 text-umn-maroon line-clamp-2">{title}</h3>
    
    <p class="text-gray-600 mb-5 line-clamp-3">
      {description}
    </p>
    
    <a 
      href={link} 
      class="inline-flex items-center text-umn-maroon font-medium hover:text-umn-light-maroon transition-colors"
      data-type={type}
      data-video-id={videoId}
      target={isExternal ? "_blank" : undefined}
      rel={isExternal ? "noopener noreferrer" : undefined}
    >
      {linkText || (type === 'video' ? 'Watch video' : (isExternal ? 'Read on original site' : 'Read article'))}
      {type === 'video' ? (
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
        </svg>
      ) : isExternal ? (
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
          <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
          <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
        </svg>
      ) : (
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      )}
    </a>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .slide-up {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .slide-up.active {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* This will be added via JS */
  :global(.resource-card[data-type="video"]) {
    cursor: pointer;
  }
</style>

<script>
  // This script will run on the client side to activate animations
  document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.slide-up');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('active');
        }
      });
    }, {
      threshold: 0.1
    });
    
    cards.forEach(card => {
      observer.observe(card);
    });
  });
</script>