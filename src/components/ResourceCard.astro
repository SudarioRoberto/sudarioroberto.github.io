---
import ResourceCard from './ResourceCard.astro';
import { getCollection } from 'astro:content';

// Function to safely get blog posts
async function getBlogPosts() {
  try {
    const posts = await getCollection('blog');
    return posts.sort((a, b) => 
      new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()
    );
  } catch (error) {
    console.error("Error loading blog posts:", error);
    return [];
  }
}

// Function to safely get videos
async function getVideos() {
  try {
    const videos = await getCollection('videos');
    return videos.sort((a, b) => 
      new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()
    );
  } catch (error) {
    console.error("Error loading videos:", error);
    return [];
  }
}

// Get content
const blogPosts = await getBlogPosts();
const videos = await getVideos();

// Map blog posts to resource format
const blogResources = blogPosts.map(post => ({
  title: post.data.title,
  description: post.data.description,
  image: post.data.featuredImage,
  type: "blog",
  date: post.data.publishDate,
  link: `/blog/${post.slug}`,
  linkText: "Read article"
}));

// Map videos to resource format
const videoResources = videos.map(video => ({
  title: video.data.title,
  description: video.data.description,
  image: video.data.thumbnail,
  type: "video",
  date: video.data.publishDate,
  duration: video.data.duration,
  link: `/videos/${video.slug}`,
  linkText: "Watch video",
  videoId: video.data.videoId
}));

// Create a combined list of resources
const resources = [...blogResources, ...videoResources];

// Sort all resources by date (newest first)
const sortedResources = [...resources].sort((a, b) => {
  const dateA = new Date(a.date);
  const dateB = new Date(b.date);
  return dateB.getTime() - dateA.getTime();
});

// Limit to 6 most recent resources for homepage
const featuredResources = sortedResources.slice(0, 6);

// Log resources count for debugging
console.log(`Total resources: ${resources.length}, Videos: ${videoResources.length}, Blogs: ${blogResources.length}`);
---

<section id="resources" class="py-20 px-6 md:px-12 bg-gray-50">
  <div class="container mx-auto max-w-6xl">
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold mb-4 section-heading">Educational Resources</h2>
      <p class="text-gray-600 max-w-3xl mx-auto">
        Access practical guides, research findings, and tools to implement microbiome-focused nutrition strategies.
      </p>
    </div>
    
    {featuredResources.length > 0 ? (
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {featuredResources.map((resource, index) => (
          <ResourceCard 
            title={resource.title}
            description={resource.description}
            image={resource.image}
            type={resource.type}
            duration={resource.duration}
            link={resource.link}
            linkText={resource.linkText}
            delay={index * 0.2}
            videoId={resource.videoId}
            date={resource.date}
          />
        ))}
      </div>
    ) : (
      <div class="text-center py-16">
        <p class="text-gray-500">Resources are coming soon. Check back later!</p>
      </div>
    )}
    
    {/* View all resources button */}
    {resources.length > 6 && (
      <div class="mt-12 text-center">
        <a 
          href={videoResources.length > 0 ? "/videos" : "/blog"} 
          class="inline-flex items-center px-6 py-3 bg-umn-maroon text-white rounded-lg hover:bg-umn-light-maroon transition-all duration-300"
        >
          View All Resources
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
    )}
  </div>
</section>

<!-- Video Modal -->
<div id="videoModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center">
  <div class="bg-white rounded-lg w-full max-w-4xl mx-4 sm:mx-auto p-1 relative">
    <!-- Close button -->
    <button id="closeVideoModal" class="absolute -top-10 right-0 text-white text-xl hover:text-gray-300 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Video container with 16:9 aspect ratio -->
    <div class="relative" style="padding-bottom: 56.25%;">
      <iframe id="videoFrame" class="absolute top-0 left-0 w-full h-full rounded-lg" 
              frameborder="0" 
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen>
      </iframe>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Video modal functionality
    const videoCards = document.querySelectorAll('.resource-card[data-type="video"]');
    const videoModal = document.getElementById('videoModal');
    const videoFrame = document.getElementById('videoFrame');
    const closeVideoModal = document.getElementById('closeVideoModal');
    
    // Function to open video modal
    function openVideoModal(videoId) {
      if (videoFrame && videoModal && videoId) {
        videoFrame.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
        videoModal.classList.remove('hidden');
        videoModal.classList.add('flex');
        document.body.style.overflow = 'hidden';
      }
    }
    
    // Function to close video modal
    function closeVideoModalFunc() {
      if (videoFrame && videoModal) {
        videoModal.classList.add('hidden');
        videoModal.classList.remove('flex');
        videoFrame.src = '';
        document.body.style.overflow = '';
      }
    }
    
    // Add click event to video cards
    videoCards.forEach(card => {
      card.addEventListener('click', function(e) {
        // If the click is on the card but not on the link
        if (!e.target.closest('a')) {
          const videoId = this.getAttribute('data-video-id');
          if (videoId) {
            e.preventDefault();
            openVideoModal(videoId);
          }
        }
      });
    });
    
    // Add event listener to close button
    if (closeVideoModal) {
      closeVideoModal.addEventListener('click', closeVideoModalFunc);
    }
    
    // Close when clicking outside the video
    if (videoModal) {
      videoModal.addEventListener('click', function(e) {
        if (e.target === this) {
          closeVideoModalFunc();
        }
      });
    }
    
    // Close modal with ESC key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && videoModal && !videoModal.classList.contains('hidden')) {
        closeVideoModalFunc();
      }
    });
  });
</script>